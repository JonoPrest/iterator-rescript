// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Caml_exceptions from "rescript/lib/es6/caml_exceptions.js";

function make(state, next, isDone) {
  var innerDict = {};
  innerDict[Symbol.iterator] = (function () {
      return {
              next: (function () {
                  var done = isDone(state);
                  return {
                          value: next(state),
                          done: done
                        };
                })
            };
    });
  return innerDict;
}

var Break = /* @__PURE__ */Caml_exceptions.create("Demo.Iterator.Break");

var Continue = /* @__PURE__ */Caml_exceptions.create("Demo.Iterator.Continue");

function forEach(_iterator, _fn) {
  return (for body of _iterator {
      try {
        _fn(body)
      } catch (exn) {
        if (exn.RE_EXN_ID === Break) {
          break;
        }
        if (exn.RE_EXN_ID === Continue) {
          continue;
        }
        throw exn;
      }
    });
}

var Iterator = {
  make: make,
  Break: Break,
  Continue: Continue,
  forEach: forEach
};

var counter = make({
      contents: 0
    }, (function (count) {
        var value = count.contents;
        count.contents = count.contents + 1 | 0;
        return value;
      }), (function (count) {
        return count.contents > 10;
      }));

// console.log(counter[Symbol.iterator])


for (let count of counter) {
  console.log(count)
}
;

export {
  Iterator ,
  counter ,
}
/* counter Not a pure module */
